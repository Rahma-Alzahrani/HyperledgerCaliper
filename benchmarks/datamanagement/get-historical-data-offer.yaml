test:
  name: data-offer
  description: >-
    This testcase is to determine the large numbers of consumer query the dataOffer from application to check the scalability on hyperledger. Successive rounds create and
    retrieve dataoffer of larger byteSize.
  workers:
    number: 10
  rounds:
    - label: data-offer-evaluate-100
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 100 bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
            - 16000
            - 32000
            - 64000
          byteSize: 100
          consensus: false
    - label: data-offer-evaluate-1000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 1000 bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          byteSize: 1000
          consensus: false
    - label: data-offer-evaluate-2000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 2000 bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          byteSize: 2000
          consensus: false
    - label: data-offer-evaluate-4000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 4000 bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          byteSize: 4000
          consensus: false
    - label: data-offer-evaluate-8000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 8000 bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          byteSize: 8000
          consensus: false
    - label: data-offer-evaluate-16000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 16000
        bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          byteSize: 16000
          consensus: false
    - label: data-offer-evaluate-32000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 32000
        bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          byteSize: 32000
          consensus: false
    - label: data-offer-evaluate-64000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 64000
        bytes.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          consensus: false
    - label: data-offer-evaluate-8000-fixed-tps
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `data-offer-query`. This method
        performs a getState on an item that matches an dataOffer of size 8000 bytes
        at a fixed TPS.
      chaincodeID: basic
      txDuration: 60
      rateControl:
        type: fixed-rate
        opts:
          startingTps: 1
      workload:
        module: benchmarks/datamanagement/workloads/get-data-offer.js
        arguments:
          chaincodeID: basic
          noSetup: true
          byteSize: 8000
          consensus: false
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001